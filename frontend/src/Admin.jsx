import React, { useEffect, useState } from "react";
import Header from "./components/header";
import axios from "axios";
import Taker from "./components/Taker";
import PopUp from "./components/PopUp";
import Button1 from "./components/Button1";
import AddStudent from "./components/AddStudent";
import { useNavigate } from "react-router-dom";
import Dropdown from "./components/Dropdown";
import EditStudent from "./components/EditStudent";

function Admin({ srcode }) {
  const [takers, setTakers] = useState([]);
  const [panel, setPanel] = useState("takers");
  const [newUser, setNewUser] = useState({ courses: [] });
  const [isSuccess, setIsSuccess] = useState(false);
  const [isShowAdd, setIsShowAdd] = useState(false);
  const [isShowEdit, setIsShowEdit] = useState(false);
  const [sortKey, setSortKey] = useState("all");
  const [programs, setPrograms] = useState([]);
  const [rendered, setRendered] = useState([]);

  const navigate = useNavigate();
  useEffect(() => {
    console.log(newUser);
  }, [newUser]);

  const fetchTakers = async () => {
    try {
      const response = await axios.get(
        "http://127.0.0.1:3001/api/v1/user/admin/all"
      );
      if (response.status === 200) {
        const takers = response.data.courseTypes;
        const allDegrees = [];
        const counts = {};
        console.log(takers);
        takers.forEach((course) => {
          const count = { available: false };
          if (!allDegrees.includes(course.degree)) {
            allDegrees.push(course.degree);
          }
          if (Object.keys(counts).includes(course.course_code)) {
            counts[course.course_code].count += 1;
            if (counts[course.course_code].count >= 5) {
              counts[course.course_code].available = true;
            }
          } else {
            count.course_title = course.course_title;
            count.count = 1;
            count.degree = course.degree;
            counts[course.course_code] = count;
          }
        });
        setPrograms(allDegrees);
        setTakers(counts);
      }
    } catch (err) {
      console.error(err);
    }
  };

  useEffect(() => {
    setRendered(takers);
  }, [takers]);

  useEffect(() => {
    const last = {};
    if (sortKey === "all") {
      setRendered(takers);
    } else {
      Object.keys(takers).map((el) => {
        const degree = takers[el].degree;
        if (degree === sortKey) {
          last[el] = takers[el];
        }
      });
      console.log(last);
      setRendered(last);
    }
  }, [sortKey]);

  useEffect(() => {
    if (!srcode) {
      navigate("/");
    }
    fetchTakers();
  }, []);

  const handleCreateUser = async () => {
    try {
      const response = await axios.post(
        "http://127.0.0.1:3001/api/v1/user/create",
        newUser
      );
      if (response.status === 200) {
        setIsSuccess(true);
        await fetchTakers();
      }
    } catch (err) {
      console.error(err);
    }
  };

  return (
    <div className="w-full min-h-screen flex flex-col items-center gap-4 relative">
      <Header srcode={srcode} />
      <div className="w-[95%] bg-[#C21B1B] h-[120px] font-semibold text-white flex items-center justify-center text-[20px]">
        <h1>POS GENERATION FOR ALANGILAN GRADUATE SCHOOL</h1>
      </div>
      <div className="w-full px-10 flex justify-end gap-2">
        <Button1
          text="Add Student"
          handleClick={() => {
            setIsShowAdd(!isShowAdd);
          }}
        />
        <Button1 text="Edit Students" handleClick={() => {
          setIsShowEdit(!isShowEdit)
        }} />
      </div>

      {isShowAdd && (
        <AddStudent
          data={setNewUser}
          show={setIsShowAdd}
          submit={handleCreateUser}
        />
      )}

      {isShowEdit && (
        <EditStudent show={setIsShowEdit} refresh={async ()=>{
          await fetchTakers();
        }}/>
      )}

      {isSuccess && (
        <PopUp
          text={"User Created"}
          handleClick={() => {
            setIsSuccess(false);
          }}
        />
      )}
      {panel === "takers" && (
        <>
          <div className="w-full px-10">
            <h1>Available Courses</h1>
            <p>
              Courses listed below are generated by our system. For inquiries,
              please contact registrar/admin.
            </p>
          </div>
          <div className="flex gap-2 items-center w-full px-10">
            <Dropdown setKey={setSortKey} items={["all",...programs]} />
          </div>
          <div className="mt-[30px] flex flex-col bg-slate-100 w-[900px]">
            <div className="flex gap-10 p-5 border-b-[0px] border-[#0000002f] font-semibold font-Inter">
              <h1 className="w-[105px]">Course Code</h1>
              <h1 className="w-[440px]">Course Title</h1>
              <h1 className="w-[125px]">No. of Students</h1>
              <h1 className={"w-[10px]"}>Status</h1>
            </div>
          </div>

          <div className="flex flex-col h-[400px] overflow-y-auto mb-[60px] w-[900px]">
            {Object.keys(rendered).map((code) => {
              return (
                // <div className="flex gap-10">
                //   <h1 className="w-[100px]">{code}</h1>
                //   <h1 className="w-[500px]">{takers[code].course_title}</h1>
                //   <h1 className="w-[100px]">{takers[code].count}</h1>
                //   <h1 className="w-[100px]">{takers[code].available ? "Green": "Red"}</h1>
                // </div>
                <Taker takers={takers} code={code} />
              );
            })}
          </div>
        </>
      )}

      {/* Create User */}
      {/* Sort by ascending descending by no of students */}
      {/* User can add course taken */}
    </div>
  );
}

export default Admin;
